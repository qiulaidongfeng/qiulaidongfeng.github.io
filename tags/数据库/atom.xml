<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 秋来冬风的博客</title>
    <link>https://qiulaidongfeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 秋来冬风的博客</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Apr 2025 10:15:12 +0000</lastBuildDate>
    <atom:link href="https://qiulaidongfeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用redis构建聊天室</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8redis%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</link>
      <pubDate>Mon, 21 Apr 2025 10:15:12 +0000</pubDate>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8redis%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</guid>
      <description>&lt;p&gt;此博客记录我用redis构建聊天室的一个方案。&lt;/p&gt;&#xA;&lt;p&gt;首先，要实现的功能是聊天室可以被多个用户进入，在里面互相发消息聊天，能显示在线id数，聊天室会在一段时间没人发消息后自动删除。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;&#xA;&lt;p&gt;每个聊天室有一个名字，可以使用这个名字作为操作redis时的key。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何保存历史消息&#34;&gt;如何保存历史消息&lt;/h3&gt;&#xA;&lt;h4 id=&#34;性能太差不采用的&#34;&gt;性能太差不采用的&lt;/h4&gt;&#xA;&lt;p&gt;redis的string可以保存历史消息，通过将所有消息序列化为json之类保存，这样性能最差，因为消息要被重复的序列化和反序列化，所以不采用。&lt;/p&gt;&#xA;&lt;h4 id=&#34;不符合要求不采用的&#34;&gt;不符合要求不采用的&lt;/h4&gt;&#xA;&lt;p&gt;redis的发布订阅，可以构建非常简单的聊天室，但不能保存历史消息，且无法确保消息一定会被接收，所以不采用。&#xA;redis的位图，地理位置索引，HyperLogLog不能实现保存消息，所以不采用。&lt;/p&gt;&#xA;&lt;h4 id=&#34;实现更复杂不采用的&#34;&gt;实现更复杂不采用的&lt;/h4&gt;&#xA;&lt;p&gt;redis的哈希可以通过key是聊天室第n条发出消息的n,value是消息实现聊天室，意味着需要一个不断递增的n，增加了实现的复杂性，所以不采用。&#xA;redis的集合和有序集合，可以通过，聊天室第n条发出消息的n+消息的字符串插入到集合实现聊天室，同样因为需要不断递增的n，所以不采用。&#xA;redis的流相对其他数据类型更复杂，所以不采用。&lt;/p&gt;&#xA;&lt;h4 id=&#34;最终采用&#34;&gt;最终采用&lt;/h4&gt;&#xA;&lt;p&gt;redis的列表支持保存历史消息，可以被定时删除，而且通过lrange改参数start和end，很方便实现分页显示，不需要不断递增的n，所以采用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何创建聊天室&#34;&gt;如何创建聊天室&lt;/h3&gt;&#xA;&lt;p&gt;通过在redis插入一个表示聊天室的key，值为列表。&lt;/p&gt;&#xA;&lt;p&gt;首先，要使用watch命令监视在redis表示聊天室的key，然后调用exists命令。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果key已经存在，说明聊天室已经创建，调用unwatch命令结束。&lt;/li&gt;&#xA;&lt;li&gt;如果key不存在，则开启事务进行插入。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;首先，调用multi命令开启事务，然后，调用rpush命令插入key，值是一个列表，第一个值为空字符串（rpush key &amp;ldquo;&amp;quot;），然后调用expire命令设置过期时间实现自动删除，例如要两小时自动删除，则实际调用（expire key 7200），接着调用exec执行事务，不考虑网络异常等，如果事务执行成功，聊天室创建成功，否则说明聊天室被其他用户创建。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何进入聊天室&#34;&gt;如何进入聊天室&lt;/h3&gt;&#xA;&lt;p&gt;利用redis在非集群模式可以有多数据库，实现可以是历史消息在db0，用户id在db1。&#xA;使用hash可以把一个聊天室的所有id放到一起，并对id分别设置不同的过期时间，所以采用这个数据结构。&lt;/p&gt;&#xA;&lt;p&gt;具体流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;随机生成一个id。&lt;/li&gt;&#xA;&lt;li&gt;使用hsetnx命令尝试插入用户id，命令的参数key是聊天室名，field是哈希的key是id，value是空字符串（hsetnx key id &amp;ldquo;&amp;quot;）。&lt;/li&gt;&#xA;&lt;li&gt;如失败，说明id已经被使用，回到1重来。&lt;/li&gt;&#xA;&lt;li&gt;如成功，使用hexpireat命令设置id的过期时间，注意该命令在redis7.4.0开始才有，例如假设现在Uinx时间戳是100，过期时间是20秒，则实际调用(hexpireat key 120 FIELDS id)。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;因为只有2成功才能执行4，且2同时多个用户执行只有一个成功，所以这里不需要使用事务。&lt;/p&gt;&#xA;&lt;p&gt;注意这里不需要更新聊天室的过期时间，因为有人但无人发消息的聊天室是不活跃的，和本来就没人的聊天室一样可以定时删除。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何发送文字消息到聊天室&#34;&gt;如何发送文字消息到聊天室&lt;/h3&gt;&#xA;&lt;p&gt;把文字消息发送到聊天室，只需要把文字消息插入到列表尾部，并且更新id的过期时间。&lt;/p&gt;&#xA;&lt;p&gt;rpush命令虽然可以做到这一点，但在聊天室不存在时也不会失败，而是产生第一个字符串非空的列表，破坏创建聊天室时产生的不变量，会造成后续获取历史消息时不显示第一条消息。&#xA;虽然通过事务和exists命令配合rpush命令可以解决上面的问题，但性能更差。&lt;/p&gt;&#xA;&lt;p&gt;rpushx命令在key不存在时不插入，解决了上面的问题，所以采用。&lt;/p&gt;&#xA;&lt;p&gt;具体流程：&#xA;在db0&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用rpushx key 文字消息。&lt;/li&gt;&#xA;&lt;li&gt;调用expire更新聊天室过期时间。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这里不需要事务，因为每条命令是原子操作就够了，即使前后调用多次expire，旧的调用后执行，最后结果也是，过期时间更新到当前时间+指定时长。&lt;/p&gt;&#xA;&lt;p&gt;在db1调用hexpireat更新id过期时间。&lt;/p&gt;&#xA;&lt;h3 id=&#34;如何获取历史消息等信息&#34;&gt;如何获取历史消息等信息&lt;/h3&gt;&#xA;&lt;p&gt;获取列表的所有元素即可获取历史消息，同时可以获取聊天室还有多久自动删除，以及在线id数。因为实践中，这样可以重复利用一个GET请求响应多个有关的数据，提升性能。&lt;/p&gt;&#xA;&lt;p&gt;具体流程：&#xA;在db0&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用lrange key 1 -1，获取列表存的所有历史文字消息。&lt;/li&gt;&#xA;&lt;li&gt;调用ttl key获取聊天室还有多久自动删除。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在db1&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用hexpireat更新id过期时间。&lt;/li&gt;&#xA;&lt;li&gt;调用hlen命令（hlen key）,获取在线id数。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;如何退出聊天室&#34;&gt;如何退出聊天室&lt;/h3&gt;&#xA;&lt;p&gt;在db1调用hdel key id即可。&#xA;可以客户端和服务端定时通信，客户端长时间无响应就自动退出聊天室。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库配置tls的几个坑点</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AEtls%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91%E7%82%B9/</link>
      <pubDate>Wed, 19 Mar 2025 19:22:51 +0000</pubDate>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AEtls%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91%E7%82%B9/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;用docker安装的redis，配置tls时，许多网上相关的内容都是讲的生成证书和改redis配置文件的tls部分，但是没讲如果docker安装在wsl2，还要修改redis配置文件的bind为0.0.0.0。&lt;/li&gt;&#xA;&lt;li&gt;mongodb不支持tls1.3。&lt;/li&gt;&#xA;&lt;li&gt;mongodb和redis默认在启用tls时启用客户端证书验证，意味着默认只配置服务端证书验证还不能用tls连接mongodb和redis。&lt;/li&gt;&#xA;&lt;li&gt;一些网上讲用openssl自建ca签发tls证书的内容没有讲到证书SAN信息要包含服务端的域名或IP，不包含的话服务端使用这样的证书，客户端连接时会产生这样的错误Hostname/IP does not match certificate&amp;rsquo;s altnames: IP: 127.0.0.1 is not in the cert&amp;rsquo;s list:&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
