<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 秋来冬风的博客</title>
    <link>https://qiulaidongfeng.github.io/</link>
    <description>Recent content in Home on 秋来冬风的博客</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>秋来冬风</managingEditor>
    <webMaster>秋来冬风</webMaster>
    <lastBuildDate>Sat, 31 May 2025 20:57:51 +0800</lastBuildDate>
    <atom:link href="https://qiulaidongfeng.github.io/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go1.25值得关注的</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/go1.25%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84/</link>
      <pubDate>Sat, 31 May 2025 20:57:51 +0800</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/go1.25%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84/</guid>
      <description>&lt;p&gt;go1.25开发周期已经进入发布冻结，一般情况不再会有新功能，目前笔者认为有以下值得关注的：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;GOMAXPROCS现在会考虑运行在容器时的CPU限制，这在Go程序运行于Kubernetes等容器时非常有用。&lt;/li&gt;&#xA;&lt;li&gt;现在有一个新的垃圾收集器作为实验，在构建时设置环境变量GOEXPERIMENT=greenteagc启用，这在某些场景下提高了性能。&lt;/li&gt;&#xA;&lt;li&gt;现在对于panic后recover再panic的value，不会重复打印value，这避免了测试时panic最终输出包括重复内容。&lt;/li&gt;&#xA;&lt;li&gt;实验性包testing/synctest已经结束实验转正，像其他标准库的包一样按照go1兼容性承诺保证向后兼容，它为测试并发代码提供了支持。&lt;/li&gt;&#xA;&lt;li&gt;编译器现在使用DWARF version 5生成调试信息，这减少了编译生成二进制文件的大小。&lt;/li&gt;&#xA;&lt;li&gt;net/http包增加了防范跨站点伪造攻击（CSRF）的API。&lt;/li&gt;&#xA;&lt;li&gt;构建时设置环境变量GOEXPERIMENT=jsonv2，可以体验正在使用的json包的v2版本。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>我使用Cloudflare免费计划的经验</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E6%88%91%E4%BD%BF%E7%94%A8cloudflare%E5%85%8D%E8%B4%B9%E8%AE%A1%E5%88%92%E7%9A%84%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Mon, 12 May 2025 11:28:49 +0800</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E6%88%91%E4%BD%BF%E7%94%A8cloudflare%E5%85%8D%E8%B4%B9%E8%AE%A1%E5%88%92%E7%9A%84%E7%BB%8F%E9%AA%8C/</guid>
      <description>&lt;h2 id=&#34;cloudflare简介&#34;&gt;Cloudflare简介&lt;/h2&gt;&#xA;&lt;p&gt;Cloudflare是一家2009年成立于美国的企业，初衷是保护网络安全，目前在 330 多个城市拥有数据中心，与大约 95% 的全球互联网用户距离仅约 50 毫秒，凭借 388 Tbps 的网络容量，成功缓解了一些有史以来最大规模的 DDoS 攻击。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于我</title>
      <link>https://qiulaidongfeng.github.io/about/</link>
      <pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/about/</guid>
      <description>&lt;h1 class=&#34;text-center&#34;&gt;关于我&lt;/h1&gt;&#xA;&lt;section class=&#34;mt-4 p-4 card&#34;&gt;&#xA;    &lt;h2&gt;简介：&lt;/h2&gt;&#xA;    &lt;p&gt;一位Go语言程序员，专业的软件设计师，我给Go语言贡献过很多代码，推动了多项Go语言的提案前进，是go-assigness组成员，有Go语言的may-start-trybots权限。有多年编程经验和网站建设经验，热爱研究http3等前沿技术。&#xA;    &lt;/p&gt;</description>
    </item>
    <item>
      <title>用redis构建聊天室</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8redis%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</link>
      <pubDate>Mon, 21 Apr 2025 10:15:12 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8redis%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</guid>
      <description>&lt;p&gt;此博客记录我用redis构建聊天室的一个方案。&lt;/p&gt;&#xA;&lt;p&gt;首先，要实现的功能是聊天室可以被多个用户进入，在里面互相发消息聊天，能显示在线id数，聊天室会在一段时间没人发消息后自动删除。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库配置tls的几个坑点</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AEtls%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91%E7%82%B9/</link>
      <pubDate>Wed, 19 Mar 2025 19:22:51 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AEtls%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91%E7%82%B9/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;用docker安装的redis，配置tls时，许多网上相关的内容都是讲的生成证书和改redis配置文件的tls部分，但是没讲如果docker安装在wsl2，还要修改redis配置文件的bind为0.0.0.0。&lt;/li&gt;&#xA;&lt;li&gt;mongodb不支持tls1.3。&lt;/li&gt;&#xA;&lt;li&gt;mongodb和redis默认在启用tls时启用客户端证书验证，意味着默认只配置服务端证书验证还不能用tls连接mongodb和redis。&lt;/li&gt;&#xA;&lt;li&gt;一些网上讲用openssl自建ca签发tls证书的内容没有讲到证书SAN信息要包含服务端的域名或IP，不包含的话服务端使用这样的证书，客户端连接时会产生这样的错误Hostname/IP does not match certificate&amp;rsquo;s altnames: IP: 127.0.0.1 is not in the cert&amp;rsquo;s list:&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>在go标准库外实现比go标准库更好的arena</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E5%9C%A8go%E6%A0%87%E5%87%86%E5%BA%93%E5%A4%96%E5%AE%9E%E7%8E%B0%E6%AF%94%E6%A0%87%E5%87%86%E5%BA%93%E6%9B%B4%E5%A5%BD%E7%9A%84arena/</link>
      <pubDate>Wed, 12 Feb 2025 03:36:31 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E5%9C%A8go%E6%A0%87%E5%87%86%E5%BA%93%E5%A4%96%E5%AE%9E%E7%8E%B0%E6%AF%94%E6%A0%87%E5%87%86%E5%BA%93%E6%9B%B4%E5%A5%BD%E7%9A%84arena/</guid>
      <description>&lt;p&gt;此博客介绍笔者是如何在go标准库外实现比go标准库更好的arena。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;arena是一种内存管理方法，从中分配的内存可以被同时释放，适合在一组object的生命周期相同或相近的场景使用，以减少垃圾收集开销。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言tls1.3密码套件修改研究</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/go%E8%AF%AD%E8%A8%80tls1.3%E5%AF%86%E7%A0%81%E5%A5%97%E4%BB%B6%E4%BF%AE%E6%94%B9%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Tue, 11 Feb 2025 20:00:46 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/go%E8%AF%AD%E8%A8%80tls1.3%E5%AF%86%E7%A0%81%E5%A5%97%E4%BB%B6%E4%BF%AE%E6%94%B9%E7%A0%94%E7%A9%B6/</guid>
      <description>&lt;p&gt;有些浏览器可以看到tls的一些信息，例如&#xA;&lt;img src=&#34;https://qiulaidongfeng.github.io/images/s.jpg&#34; alt=&#34;&#34;&gt;&#xA;笔者看到go语言默认用的aes128,其他tls1.3实现有默认用aes256的。&lt;/p&gt;&#xA;&lt;p&gt;go语言的tls默认tls1.3使用下列密码套件按下列顺序&#xA;TLS_AES_128_GCM_SHA256,&#xA;TLS_AES_256_GCM_SHA384,&#xA;TLS_CHACHA20_POLY1305_SHA256&#xA;并且文档中明确列出TLS 1.3 ciphersuites are not configurable(TLS 1.3密码套件是不可配置的)&lt;/p&gt;</description>
    </item>
    <item>
      <title>用原子指针&#43;互斥锁实现仅写时加锁</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8%E5%8E%9F%E5%AD%90%E6%8C%87%E9%92%88&#43;%E4%BA%92%E6%96%A5%E9%94%81%E5%AE%9E%E7%8E%B0%E4%BB%85%E5%86%99%E6%97%B6%E5%8A%A0%E9%94%81/</link>
      <pubDate>Tue, 17 Dec 2024 20:00:37 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E7%94%A8%E5%8E%9F%E5%AD%90%E6%8C%87%E9%92%88&#43;%E4%BA%92%E6%96%A5%E9%94%81%E5%AE%9E%E7%8E%B0%E4%BB%85%E5%86%99%E6%97%B6%E5%8A%A0%E9%94%81/</guid>
      <description>&lt;p&gt;此博客介绍我写&lt;a href=&#34;https://github.com/qiulaidongfeng/arena&#34;&gt;arena&lt;/a&gt;的一个经验。&lt;/p&gt;&#xA;&lt;p&gt;通常在访问共享资源时，简单的加互斥锁就够用，在读多写少时使用读写锁优化性能，在写&lt;a href=&#34;https://github.com/qiulaidongfeng/arena&#34;&gt;arena&lt;/a&gt;等场景，为了极致的性能，需要别的方法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;回顾一些知识说明为什么互斥锁和读写锁不适合用在需要极致性能时&#34;&gt;回顾一些知识，说明为什么互斥锁和读写锁不适合用在需要极致性能时。&lt;/h2&gt;&#xA;&lt;p&gt;为什么访问共享资源时需要加锁，因为如果不加锁，多个线程可能看到正在进行操作的中间状态，并基于此中间状态执行它自己的一些操作，导致错误结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go1.24rc1发布</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/go1-24rc1%E5%8F%91%E5%B8%83/</link>
      <pubDate>Mon, 16 Dec 2024 22:46:29 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/go1-24rc1%E5%8F%91%E5%B8%83/</guid>
      <description>&lt;p&gt;go1.24rc1已经发布，值得注意的是&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;抗量子密钥交换（crypto/mlkem）&lt;/li&gt;&#xA;&lt;li&gt;弱指针&lt;/li&gt;&#xA;&lt;li&gt;通用哈希函数（我写的实现）&lt;/li&gt;&#xA;&lt;li&gt;泛型类型别名&lt;/li&gt;&#xA;&lt;li&gt;更快的终结器&lt;/li&gt;&#xA;&lt;li&gt;CPU开销平均降低2-3%，改进包括新的map内置实现，更高效的小object内存分配，新的运行时内部互斥实现&lt;/li&gt;&#xA;&lt;li&gt;实验性包testing/synctest用来测试并发代码&lt;/li&gt;&#xA;&lt;li&gt;sync.Map的新实现，提高了性能&lt;/li&gt;&#xA;&lt;li&gt;os.Root用来在特定目录执行文件系统操作&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>How does the metrics package record the number of non default behavior occurrences</title>
      <link>https://qiulaidongfeng.github.io/en/howdoesthemetricspackagerecordthenumberofnondefaultbehavioroccurrences-md/</link>
      <pubDate>Thu, 06 Apr 2023 14:19:16 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/en/howdoesthemetricspackagerecordthenumberofnondefaultbehavioroccurrences-md/</guid>
      <description>&lt;h1 id=&#34;go121-forward-looking&#34;&gt;Go1.21 Forward Looking&lt;/h1&gt;&#xA;&lt;p&gt;Software translation&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-does-the-metrics-package-record-the-number-of-non-default-behavior-occurrences&#34;&gt;How does the metrics package record the number of non default behavior occurrences&lt;/h2&gt;&#xA;&lt;p&gt;Go1.21 is currently under development, &lt;a href=&#34;https://tip.golang.org/doc/go1.21&#34;&gt;draft release note&lt;/a&gt;It is mentioned that it is expected to be released in August 2023.&lt;/p&gt;&#xA;&lt;p&gt;In the development branch of &lt;a href=&#34;https://github.com/golang/go&#34;&gt;go1.21&lt;/a&gt; In, &lt;a href=&#34;https://pkg.go.dev/runtime/metrics@master&#34;&gt;metrics&lt;/a&gt;  package, a series of indicators in the format /godebug/non-default-behavior/(godebug-name):events ,(godebug name) is a series of key value pairs for GODEBUG environment variables, and the names of certain keys, such as the execerrdot introduced in go1.19 (hereinafter referred to as &lt;strong&gt;godebug indicator&lt;/strong&gt;). &lt;strong&gt;Through these newly added indicators, the number of non default behavior occurrences caused by setting these environmental variables can be obtained.&lt;/strong&gt; This article analyzes how this is achieved by studying the source code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>metrics包如何记录非默认行为发生次数</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/metrics%E5%8C%85%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E9%9D%9E%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E5%8F%91%E7%94%9F%E6%AC%A1%E6%95%B0-md/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/metrics%E5%8C%85%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E9%9D%9E%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E5%8F%91%E7%94%9F%E6%AC%A1%E6%95%B0-md/</guid>
      <description>&lt;h1 id=&#34;go121前瞻&#34;&gt;go1.21前瞻&lt;/h1&gt;&#xA;&lt;h2 id=&#34;metrics包如何记录非默认行为发生次数&#34;&gt;metrics包如何记录非默认行为发生次数&lt;/h2&gt;&#xA;&lt;p&gt;go1.21正在开发中，&lt;a href=&#34;https://tip.golang.org/doc/go1.21&#34;&gt;发行说明草案&lt;/a&gt; 提到预计2023年8月发布。&lt;/p&gt;&#xA;&lt;p&gt;在go1.21的&lt;a href=&#34;https://github.com/golang/go&#34;&gt;开发分支&lt;/a&gt;中，&lt;a href=&#34;https://pkg.go.dev/runtime/metrics@master&#34;&gt;metrics&lt;/a&gt; 包中，新增了一系列格式如同 /godebug/non-default-behavior/(godebug-name):events的指标，(godebug-name)是GODEBUG环境变量的一系列键值对，某些键的名称，比如go1.19引入的execerrdot（以下简称&lt;strong&gt;godebug指标&lt;/strong&gt;）。通过这些新增的指标，可以获取&lt;strong&gt;因为设置了这些环境变量导致非默认行为发生次数的数量&lt;/strong&gt;，本文通过研究源代码来分析这是如何实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiplication_or_dereference</title>
      <link>https://qiulaidongfeng.github.io/en/multiplication-or-dereference-md/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/en/multiplication-or-dereference-md/</guid>
      <description>&lt;h1 id=&#34;multiplication-or-dereference&#34;&gt;Multiplication or dereference&lt;/h1&gt;&#xA;&lt;p&gt;Software translation&lt;/p&gt;&#xA;&lt;p&gt;In the &lt;a href=&#34;https://gitee.com/u-language/u-language&#34;&gt;U Language Project&lt;/a&gt; A separator based lexical analyzer is implemented in the &lt;a href=&#34;https://gitee.com/u-language/u-language/blob/master/pkg/lex/README.md&#34;&gt;Lexical Analyzer Design Document&lt;/a&gt; &amp;ldquo;The current * will be parsed as a multiplication sign, and when there is no pointer, there is no problem.&amp;rdquo;. Now we are ready to add pointers to this project. If you use * to dereference as in other languages, there are two options&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;When constructing an abstract syntax tree, handle ambiguity where * can be both a multiplication sign and a dereference&lt;/p&gt;</description>
    </item>
    <item>
      <title>乘法还是解引用</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/%E4%B9%98%E6%B3%95%E8%BF%98%E6%98%AF%E8%A7%A3%E5%BC%95%E7%94%A8-md/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/%E4%B9%98%E6%B3%95%E8%BF%98%E6%98%AF%E8%A7%A3%E5%BC%95%E7%94%A8-md/</guid>
      <description>&lt;h1 id=&#34;乘法还是解引用&#34;&gt;乘法还是解引用&lt;/h1&gt;&#xA;&lt;p&gt;在 &lt;a href=&#34;https://gitee.com/u-language/u-language&#34;&gt;U语言项目&lt;/a&gt; 中 ，实现了一个基于分隔符的词法分析器，文档在 &lt;a href=&#34;https://gitee.com/u-language/u-language/blob/master/pkg/lex/README.md&#34;&gt;词法分析器设计文档&lt;/a&gt; ，当前 * 将被分析为乘号，在没有指针时，这样没有问题。现在准备给这个项目增加指针，如果按其他语言一样使用 * 解引用，有两种方案&lt;/p&gt;</description>
    </item>
    <item>
      <title>mmap_error</title>
      <link>https://qiulaidongfeng.github.io/en/mmap-error/</link>
      <pubDate>Thu, 02 Mar 2023 21:00:49 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/en/mmap-error/</guid>
      <description>&lt;h1 id=&#34;go121-forward-looking&#34;&gt;Go1.21 forward-looking&lt;/h1&gt;&#xA;&lt;p&gt;Software translation&lt;/p&gt;&#xA;&lt;h2 id=&#34;windows-allows-handling-exception-page-errors&#34;&gt;Windows allows handling exception page errors&lt;/h2&gt;&#xA;&lt;p&gt;Go1.21 is under development, &lt;a href=&#34;https://tip.golang.org/doc/go1.21&#34;&gt;draft release note&lt;/a&gt; Mention that it is expected to be released in August 2023&lt;/p&gt;&#xA;&lt;p&gt;According to the submitted information &lt;a href=&#34;https://github.com/golang/go/commit/e03ee85ef434f307500a71927dfb3e876161847a&#34;&gt;runtime: Allow handling of EXCEPTION_IN_PAGE_ERROR&lt;/a&gt; Go1.21 allows you to handle the access failure of the memory-mapped file through debug.SetPanicOnFault in Windows (for example, the drive where the memory-mapped file is located is ejected)&lt;/p&gt;&#xA;&lt;p&gt;For example, it comes from &lt;a href=&#34;https://github.com/golang/go/issues/58457&#34;&gt;golang/go#58457&lt;/a&gt; Example of&lt;/p&gt;</description>
    </item>
    <item>
      <title>mmap错误</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/mmap%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/mmap%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;h1 id=&#34;go121前瞻&#34;&gt;go1.21前瞻&lt;/h1&gt;&#xA;&lt;h2 id=&#34;windows允许处理异常页面错误&#34;&gt;windows允许处理异常页面错误&lt;/h2&gt;&#xA;&lt;p&gt;go1.21正在开发中，&lt;a href=&#34;https://tip.golang.org/doc/go1.21&#34;&gt;发行说明草案&lt;/a&gt; 提到预计2023年8月发布&lt;/p&gt;&#xA;&lt;p&gt;根据提交信息 &lt;a href=&#34;https://github.com/golang/go/commit/e03ee85ef434f307500a71927dfb3e876161847a&#34;&gt;runtime: Allow handling of EXCEPTION_IN_PAGE_ERROR&lt;/a&gt; go1.21允许在windows通过debug.SetPanicOnFault 处理内存映射文件的访问故障（例如，内存映射文件所在的驱动器被弹出）&lt;/p&gt;</description>
    </item>
    <item>
      <title>First blog</title>
      <link>https://qiulaidongfeng.github.io/en/one/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/en/one/</guid>
      <description>&lt;p&gt;Software translation&#xA;On March 1, 2023, I published this blog&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一个博客</title>
      <link>https://qiulaidongfeng.github.io/zh-cn/one/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      <author>秋来冬风</author>
      <guid>https://qiulaidongfeng.github.io/zh-cn/one/</guid>
      <description>&lt;p&gt;2023年3月1日，我公开了这个博客&lt;/p&gt;</description>
    </item>
  </channel>
</rss>